[["0",{"pageContent":"init","metadata":{}}],["1",{"pageContent":"DAVRON USMONOV\n\n\n\n\n\n\n\nINVOICE\n\n\n\n\n\n150100, Uzbekistan, Fergana\n\nUniversitet street 17, 3\n\n\n\n\n\n\n\n\n\n\n\nakunin94@gmail.com, \n\n+99893 982-62-52\n\n\n\n\n\n\n\n\n\n\n\n\n\nInvoice Date: 10/03/2025\n\n\n\n\n\n\n\nINVOICE # 17\n\n\n\n\n\n\n\nInvoice Period: 09/01/2025 - 09/30/2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBILL TO\n\n\n\n\n\n\n\n\n\n\n\n\n\nRoute4Me, Inc\n\n\n\n\n\n\n\n\n\nDept: R&D Front End \n\n\n\n\n\n\n\n\n\n1010 N Florida Ave\n\nTampa, FL 33602\n\n\n\n\n\n\n\n\n\n1(888) 552 - 9045\n\n\n\n\n\n\n\n\n\nap@route4me.com\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDESCRIPTION\n\nQTY\n\nUNIT PRICE\n\nTOTAL\n\n\n\n\n\nSoftware Development\n\n208.3\n\n$29\n\n$6040\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\n\n\n\n\n0.00\n\n\n\n\n\n\n\nRemarks / Payment Instructions: \n\n\n\n\n\nSUBTOTAL\n\n$6040\n\n\n\n\n\n\n\n\n\n\n\nBalance Due\n\n$6040","metadata":{"id":"Invoice Template.docx-chunk-0","source":"docx","filename":"Invoice Template.docx","uploadedAt":"2025-10-06T16:08:47.652Z"}}],["2",{"pageContent":"# Vue 3 Composition API Guide\n\n## Setup Function\n\nThe setup() function is the entry point for Composition API in Vue 3.\n\n## Reactivity\n\nVue 3 offers two main ways to create reactive data:\n\n### ref()\n\nUse ref() for primitive values like strings, numbers, and booleans. Access via .value property.\n\n### reactive()\n\nUse reactive() for objects. Provides direct access without .value.\n\n### computed()\n\nFor derived values that depend on reactive data. Automatically updates when dependencies change.\n\n## Lifecycle Hooks\n\nVue 3 provides composition functions for lifecycle:\n\n- onMounted() - Called after component is mounted to DOM\n- onUpdated() - Called after reactive data changes\n- onUnmounted() - Called before component is destroyed\n- onBeforeMount() - Called before mounting\n- onBeforeUpdate() - Called before updates\n\n## Script Setup Syntax\n\nThe script setup provides a more concise way to write Composition API. Everything declared is automatically available in template.","metadata":{"id":"test.txt-chunk-0","source":"txt","filename":"test.txt","uploadedAt":"2025-10-06T16:11:19.595Z"}}],["3",{"pageContent":"## Script Setup Syntax\n\nThe script setup provides a more concise way to write Composition API. Everything declared is automatically available in template.\n\n## Props and Emits with TypeScript\n\nYou can define props and emits with full TypeScript support using defineProps and defineEmits with generic types.\n\n## Composables\n\nComposables are reusable composition functions. They encapsulate stateful logic and can be shared across components. Always name them with 'use' prefix like useCounter, useAuth, etc.\n\n## Watch and WatchEffect\n\nwatch() allows you to watch specific reactive sources and react to changes. watchEffect() automatically tracks dependencies and runs when any dependency changes.\n\n## Best Practices\n\n1. Use script setup for more concise code\n2. Group related logic together\n3. Extract composables for reusable logic\n4. Use TypeScript for better type safety\n5. Avoid deep reactivity for large objects\n6. Clean up side effects in onUnmounted\n7. Name composables with use prefix","metadata":{"id":"test.txt-chunk-1","source":"txt","filename":"test.txt","uploadedAt":"2025-10-06T16:11:19.596Z"}}],["4",{"pageContent":"## Common Patterns\n\n### Loading State\n\nTrack loading, data, and error states when fetching data from API.\n\n### Form Handling\n\nUse reactive objects for form data and validation errors.\n\n### Debounced Input\n\nImplement debouncing for search inputs to reduce API calls.","metadata":{"id":"test.txt-chunk-2","source":"txt","filename":"test.txt","uploadedAt":"2025-10-06T16:11:19.596Z"}}],["5",{"pageContent":"# Vue 3 Composition API Guide\n\n## Setup Function\n\nThe setup() function is the entry point for Composition API in Vue 3.\n\n## Reactivity\n\nVue 3 offers two main ways to create reactive data:\n\n### ref()\n\nUse ref() for primitive values like strings, numbers, and booleans. Access via .value property.\n\n### reactive()\n\nUse reactive() for objects. Provides direct access without .value.\n\n### computed()\n\nFor derived values that depend on reactive data. Automatically updates when dependencies change.\n\n## Lifecycle Hooks\n\nVue 3 provides composition functions for lifecycle:\n\n- onMounted() - Called after component is mounted to DOM\n- onUpdated() - Called after reactive data changes\n- onUnmounted() - Called before component is destroyed\n- onBeforeMount() - Called before mounting\n- onBeforeUpdate() - Called before updates\n\n## Script Setup Syntax\n\nThe script setup provides a more concise way to write Composition API. Everything declared is automatically available in template.","metadata":{"id":"test.md-chunk-0","source":"markdown","filename":"test.md","uploadedAt":"2025-10-06T16:12:38.226Z"}}],["6",{"pageContent":"## Script Setup Syntax\n\nThe script setup provides a more concise way to write Composition API. Everything declared is automatically available in template.\n\n## Props and Emits with TypeScript\n\nYou can define props and emits with full TypeScript support using defineProps and defineEmits with generic types.\n\n## Composables\n\nComposables are reusable composition functions. They encapsulate stateful logic and can be shared across components. Always name them with 'use' prefix like useCounter, useAuth, etc.\n\n## Watch and WatchEffect\n\nwatch() allows you to watch specific reactive sources and react to changes. watchEffect() automatically tracks dependencies and runs when any dependency changes.\n\n## Best Practices\n\n1. Use script setup for more concise code\n2. Group related logic together\n3. Extract composables for reusable logic\n4. Use TypeScript for better type safety\n5. Avoid deep reactivity for large objects\n6. Clean up side effects in onUnmounted\n7. Name composables with use prefix","metadata":{"id":"test.md-chunk-1","source":"markdown","filename":"test.md","uploadedAt":"2025-10-06T16:12:38.227Z"}}],["7",{"pageContent":"## Common Patterns\n\n### Loading State\n\nTrack loading, data, and error states when fetching data from API.\n\n### Form Handling\n\nUse reactive objects for form data and validation errors.\n\n### Debounced Input\n\nImplement debouncing for search inputs to reduce API calls.","metadata":{"id":"test.md-chunk-2","source":"markdown","filename":"test.md","uploadedAt":"2025-10-06T16:12:38.227Z"}}]]